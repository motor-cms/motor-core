<?php

namespace DummyNamespace;

use Illuminate\Http\JsonResponse;
use Motor\Admin\Http\Controllers\ApiController;
use DummyRootNamespaceHttp\Requests\Api\DummyPatchRequest;
use DummyRootNamespaceHttp\Requests\Api\DummyPostRequest;
use DummyRootNamespaceHttp\Resources\DummyCollection;
use DummyRootNamespaceHttp\Resources\DummyResource;
use DummyRootNamespaceModels\DummyModel;
use DummyRootNamespaceServices\DummyService;

/**
 * Class DummyClass
 * @package DummyNamespace
 */
class DummyClass extends ApiController
{

    protected string $model = DummyModel::class;

    protected string $modelResource = 'DummySingularLowercase';

    /**
     * @OA\Get (
     *   tags={"DummyClass"},
     *   path="/api/DummyPluralLowercase",
     *   summary="Get DummySingularLowercase collection",
     *   security={ {"sanctum": {} }},
     *   @OA\Parameter(
     *     @OA\Schema(type="string"),
     *     in="header",
     *     name="Accept",
     *     example="application/json"
     *   ),
     *   @OA\Response(
     *     response=200,
     *     description="Success",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="data",
     *         type="array",
     *         @OA\Items(ref="#/components/schemas/DummyResource")
     *       ),
     *       @OA\Property(
     *         property="meta",
     *         ref="#/components/schemas/PaginationMeta"
     *       ),
     *       @OA\Property(
     *         property="links",
     *         ref="#/components/schemas/PaginationLinks"
     *       ),
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="Collection read"
     *       )
     *     )
     *   ),
     *   @OA\Response(
     *     response="403",
     *     description="Access denied",
     *     @OA\JsonContent(ref="#/components/schemas/AccessDenied"),
     *   )
     * )
     *
     * Display a listing of the resource.
     *
     * @return DummyCollection
     */
    public function index(): DummyCollection
    {
        $paginator = DummyService::collection()
                                  ->getPaginator();

        return (new DummyCollection($paginator))->additional(['message' => 'DummySingularTitle collection read']);
    }

    /**
     * @OA\Post (
     *   tags={"DummyClass"},
     *   path="/api/DummyPluralLowercase",
     *   summary="Create new DummySingularLowercase",
     *   @OA\RequestBody(
     *     @OA\JsonContent(ref="#/components/schemas/DummyPostRequest")
     *   ),
     *   security={ {"sanctum": {} }},
     *   @OA\Parameter(
     *     @OA\Schema(type="string"),
     *     in="header",
     *     name="Accept",
     *     example="application/json"
     *   ),
     *   @OA\Response(
     *     response=200,
     *     description="Success",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="data",
     *         type="object",
     *         ref="#/components/schemas/DummyResource"
     *       ),
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="DummySingularTitle created"
     *       )
     *     )
     *   ),
     *   @OA\Response(
     *     response="403",
     *     description="Access denied",
     *     @OA\JsonContent(ref="#/components/schemas/AccessDenied"),
     *   ),
     *   @OA\Response(
     *     response="404",
     *     description="Not found",
     *     @OA\JsonContent(ref="#/components/schemas/NotFound"),
     *   )
     * )
     *
     * Store a newly created resource in storage.
     *
     * @param DummyPostRequest $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(DummyPostRequest $request): JsonResponse
    {
        $result = DummyService::create($request)
                               ->getResult();

        return (new DummyResource($result))->additional(['message' => 'DummySingularTitle created'])
                                            ->response()
                                            ->setStatusCode(201);
    }


    /**
     * @OA\Get (
     *   tags={"DummyClass"},
     *   path="/api/DummyPluralLowercase/{DummySingularLowercase}",
     *   summary="Get single DummySingularLowercase",
     *   security={ {"sanctum": {} }},
     *   @OA\Parameter(
     *     @OA\Schema(type="string"),
     *     in="header",
     *     name="Accept",
     *     example="application/json"
     *   ),
     *   @OA\Parameter(
     *     @OA\Schema(type="integer"),
     *     in="path",
     *     name="DummySingularLowercase",
     *     parameter="DummySingularLowercase",
     *     description="DummySingularTitle id"
     *   ),
     *   @OA\Response(
     *     response=200,
     *     description="Success",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="data",
     *         type="object",
     *         ref="#/components/schemas/DummyResource"
     *       ),
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="DummySingularTitle read"
     *       )
     *     )
     *   ),
     *   @OA\Response(
     *     response="403",
     *     description="Access denied",
     *     @OA\JsonContent(ref="#/components/schemas/AccessDenied"),
     *   ),
     *   @OA\Response(
     *     response="404",
     *     description="Not found",
     *     @OA\JsonContent(ref="#/components/schemas/NotFound"),
     *   )
     * )
     *
     * Display the specified resource.
     *
     * @param DummyModel $DummySingularCamelCase
     * @return DummyResource
     */
    public function show(DummyModel $DummySingularCamelCase): DummyResource
    {
        $result = DummyService::show($DummySingularCamelCase)
                              ->getResult();
        return (new DummyResource($result))->additional(['message' => 'DummySingularTitle read']);
    }


    /**
     * @OA\Put (
     *   tags={"DummyClass"},
     *   path="/api/DummyPluralLowercase/{DummySingularLowercase}",
     *   summary="Update an existing DummySingularLowercase",
     *   @OA\RequestBody(
     *     @OA\JsonContent(ref="#/components/schemas/DummyPatchRequest")
     *   ),
     *   security={ {"sanctum": {} }},
     *   @OA\Parameter(
     *     @OA\Schema(type="string"),
     *     in="header",
     *     name="Accept",
     *     example="application/json"
     *   ),
     *   @OA\Parameter(
     *     @OA\Schema(type="integer"),
     *     in="path",
     *     name="DummySingularLowercase",
     *     parameter="DummySingularLowercase",
     *     description="DummySingularTitle id"
     *   ),
     *   @OA\Response(
     *     response=200,
     *     description="Success",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="data",
     *         type="object",
     *         ref="#/components/schemas/DummyResource"
     *       ),
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="DummySingularTitle updated"
     *       )
     *     )
     *   ),
     *   @OA\Response(
     *     response="403",
     *     description="Access denied",
     *     @OA\JsonContent(ref="#/components/schemas/AccessDenied"),
     *   ),
     *   @OA\Response(
     *     response="404",
     *     description="Not found",
     *     @OA\JsonContent(ref="#/components/schemas/NotFound"),
     *   )
     * )
     *
     * Update the specified resource in storage.
     *
     * @param DummyPatchRequest $request
     * @param DummyModel        $DummySingularCamelCase
     * @return DummyResource
     */
    public function update(DummyPatchRequest $request, DummyModel $DummySingularCamelCase): DummyResource
    {
        $result = DummyService::update($DummySingularCamelCase, $request)
                              ->getResult();
        return (new DummyResource($result))->additional(['message' => 'DummySingularTitle updated']);
    }


    /**
     * @OA\Delete (
     *   tags={"DummyClass"},
     *   path="/api/DummyPluralLowercase/{DummySingularLowercase}",
     *   summary="Delete a DummySingularLowercase",
     *   security={ {"sanctum": {} }},
     *   @OA\Parameter(
     *     @OA\Schema(type="string"),
     *     in="header",
     *     name="Accept",
     *     example="application/json"
     *   ),
     *   @OA\Parameter(
     *     @OA\Schema(type="integer"),
     *     in="path",
     *     name="DummySingularLowercase",
     *     parameter="DummySingularLowercase",
     *     description="DummySingularTitle id"
     *   ),
     *   @OA\Response(
     *     response=200,
     *     description="Success",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="DummySingularTitle deleted"
     *       )
     *     )
     *   ),
     *   @OA\Response(
     *     response="403",
     *     description="Access denied",
     *     @OA\JsonContent(ref="#/components/schemas/AccessDenied"),
     *   ),
     *   @OA\Response(
     *     response="404",
     *     description="Not found",
     *     @OA\JsonContent(ref="#/components/schemas/NotFound"),
     *   ),
     *   @OA\Response(
     *     response="400",
     *     description="Bad request",
     *     @OA\JsonContent(
     *       @OA\Property(
     *         property="message",
     *         type="string",
     *         example="Problem deleting DummySingularLowercase"
     *       )
     *     )
     *   )
     * )
     *
     * Remove the specified resource from storage.
     *
     * @param DummyModel $DummySingularCamelCase
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(DummyModel $DummySingularCamelCase): JsonResponse
    {
        $result = DummyService::delete($DummySingularCamelCase)
                              ->getResult();

        if ($result) {
            return response()->json(['message' => 'DummySingularTitle deleted']);
        }
        return response()->json(['message' => 'Problem deleting DummySingularTitle'], 404);
    }
}
